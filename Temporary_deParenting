(function TemporaryParenting(thisObj) {
    // Create the UI
    function buildUI(thisObj) {
        var myPanel = (thisObj instanceof Panel) ? thisObj : new Window('palette', "Temporary Parenting");

        // Panel orientation
        myPanel.orientation = "column";

        // Add buttons
        var deParentButton = myPanel.add("button", undefined, "DeParent");
        var reParentButton = myPanel.add("button", undefined, "ReParent");

        // Assign event handlers to buttons
        deParentButton.onClick = deParentLayers;
        reParentButton.onClick = reParentLayers;

        // Finalize layout
        myPanel.layout.layout(true);
        return myPanel;
    }

    // Data storage for parent relationships
    var parentData = [];

    // UI Initialization
    var w = buildUI(thisObj);
    if (w.toString() === "[object Panel]") {
        w;
    } else {
        w.show();
    }

    // Function to DeParent selected layers
    function deParentLayers() {
        var comp = app.project.activeItem;
        if (!(comp && comp instanceof CompItem)) {
            alert("Please open or select a composition.");
            return;
        }

        var selectedLayers = comp.selectedLayers;
        if (selectedLayers.length === 0) {
            alert("Please select one or more layers.");
            return;
        }

        app.beginUndoGroup("DeParent Layers");

        try {
            parentData = []; // Reset parent data
            for (var i = 0; i < selectedLayers.length; i++) {
                var layer = selectedLayers[i];

                if (!layer.parent) continue; // Skip layers without parents

                // Store the current world position and parent index
                var parentLayer = layer.parent;
                var parentPosition = parentLayer.position.value;
                var layerPosition = layer.position.value;
                var parentAnchor = parentLayer.anchorPoint.value;
                var parentScale = parentLayer.scale.value;
                var parentRotation = parentLayer.rotation.value;

                // Calculate world position for 2D layers
                var worldPosition = [
                    parentPosition[0] + (layerPosition[0] - parentAnchor[0]) * (parentScale[0] / 100),
                    parentPosition[1] + (layerPosition[1] - parentAnchor[1]) * (parentScale[1] / 100)
                ];

                // Save parent data for reParenting
                parentData.push({
                    layerIndex: layer.index,
                    parentIndex: parentLayer.index
                });

                // DeParent the layer
                layer.parent = null;

                // Restore the world position as layer's new position
                layer.position.setValue(worldPosition);
            }
        } catch (err) {
            alert("An error occurred during DeParenting: " + err.message);
        }

        app.endUndoGroup();
    }

    // Function to ReParent selected layers to their original parent
    function reParentLayers() {
        var comp = app.project.activeItem;
        if (!(comp && comp instanceof CompItem)) {
            alert("Please open or select a composition.");
            return;
        }

        if (parentData.length === 0) {
            alert("No parent data found. Please DeParent layers first.");
            return;
        }

        app.beginUndoGroup("ReParent Layers");

        try {
            for (var i = 0; i < parentData.length; i++) {
                var data = parentData[i];
                var layer = comp.layer(data.layerIndex);
                var parentLayer = comp.layer(data.parentIndex);

                if (layer) {
                    layer.parent = parentLayer;
                }
            }
        } catch (err) {
            alert("An error occurred during ReParenting: " + err.message);
        }

        app.endUndoGroup();
    }
})(this);
