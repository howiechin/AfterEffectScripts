(function TemporaryParenting(thisObj) {
    // Create the UI
    function buildUI(thisObj) {
        var myPanel = (thisObj instanceof Panel) ? thisObj : new Window('palette', "Temporary Parenting", undefined, {resizeable: true});

        // Panel orientation
        myPanel.orientation = "column";
        myPanel.alignChildren = ["fill", "top"];

        // Add DeChild and ReChild buttons
        var deChildButton = myPanel.add("button", undefined, "DeChild");
        var reChildButton = myPanel.add("button", undefined, "ReChild");

        // Add a divider
        var divider = myPanel.add("panel", undefined, undefined);
        divider.size = [myPanel.size.width, 2]; // Set divider height to 2px

        // Add DeParent and ReParent buttons
        var deParentButton = myPanel.add("button", undefined, "DeParent");
        var reParentButton = myPanel.add("button", undefined, "ReParent");

        // Assign event handlers to buttons
        deChildButton.onClick = deChildLayers;
        reChildButton.onClick = reChildLayers;
        deParentButton.onClick = deParentLayers;
        reParentButton.onClick = reParentLayers;

        // Finalize layout
        myPanel.layout.layout(true);
        myPanel.onResizing = myPanel.onResize = function () {
            myPanel.layout.resize();
        };

        return myPanel;
    }

    // Data storage for child-parent and parent relationships
    var childData = [];
    var parentData = [];

    // Function to DeChild selected parent layer
    function deChildLayers() {
        var comp = app.project.activeItem;
        if (!(comp && comp instanceof CompItem)) {
            alert("Please open or select a composition.");
            return;
        }

        var selectedLayers = comp.selectedLayers;
        if (selectedLayers.length !== 1) {
            alert("Please select exactly one parent layer.");
            return;
        }

        var parentLayer = selectedLayers[0];
        if (!parentLayer) {
            alert("Selected layer is not a valid layer.");
            return;
        }

        // Check if the selected layer has children
        var hasChildren = false;
        var childLayers = [];
        for (var i = 1; i <= comp.numLayers; i++) {
            var layer = comp.layer(i);
            if (layer.parent === parentLayer) {
                hasChildren = true;
                childLayers.push(layer);
            }
        }

        if (!hasChildren) {
            alert("The selected layer does not have any child layers.");
            return;
        }

        app.beginUndoGroup("DeChild Layers");

        try {
            childData = []; // Reset child data

            // DeChild all the child layers
            for (var i = 0; i < childLayers.length; i++) {
                var childLayer = childLayers[i];
                childData.push({
                    layerIndex: childLayer.index,
                    parentIndex: parentLayer.index
                });

                childLayer.parent = null;
            }
        } catch (err) {
            alert("An error occurred during DeChilding: " + err.message);
        }

        app.endUndoGroup();
    }

    // Function to ReChild selected layers to their original parent
    function reChildLayers() {
        var comp = app.project.activeItem;
        if (!(comp && comp instanceof CompItem)) {
            alert("Please open or select a composition.");
            return;
        }

        if (childData.length === 0) {
            alert("No child data found. Please DeChild layers first.");
            return;
        }

        app.beginUndoGroup("ReChild Layers");

        try {
            for (var i = 0; i < childData.length; i++) {
                var data = childData[i];
                var layer = comp.layer(data.layerIndex);
                var parentLayer = comp.layer(data.parentIndex);

                if (layer) {
                    layer.parent = parentLayer;
                }
            }
        } catch (err) {
            alert("An error occurred during ReChilding: " + err.message);
        }

        app.endUndoGroup();
    }

    // Function to DeParent selected layers
    function deParentLayers() {
        var comp = app.project.activeItem;
        if (!(comp && comp instanceof CompItem)) {
            alert("Please open or select a composition.");
            return;
        }

        var selectedLayers = comp.selectedLayers;
        if (selectedLayers.length === 0) {
            alert("Please select one or more layers.");
            return;
        }

        app.beginUndoGroup("DeParent Layers");

        try {
            parentData = []; // Reset parent data
            for (var i = 0; i < selectedLayers.length; i++) {
                var layer = selectedLayers[i];

                if (!layer.parent) continue; // Skip layers without parents

                parentData.push({
                    layerIndex: layer.index,
                    parentIndex: layer.parent.index
                });

                layer.parent = null;
            }
        } catch (err) {
            alert("An error occurred during DeParenting: " + err.message);
        }

        app.endUndoGroup();
    }

    // Function to ReParent selected layers to their original parent
    function reParentLayers() {
        var comp = app.project.activeItem;
        if (!(comp && comp instanceof CompItem)) {
            alert("Please open or select a composition.");
            return;
        }

        if (parentData.length === 0) {
            alert("No parent data found. Please DeParent layers first.");
            return;
        }

        app.beginUndoGroup("ReParent Layers");

        try {
            for (var i = 0; i < parentData.length; i++) {
                var data = parentData[i];
                var layer = comp.layer(data.layerIndex);
                var parentLayer = comp.layer(data.parentIndex);

                if (layer) {
                    layer.parent = parentLayer;
                }
            }
        } catch (err) {
            alert("An error occurred during ReParenting: " + err.message);
        }

        app.endUndoGroup();
    }

    // Initialize the UI
    var myScriptPanel = buildUI(thisObj);
    if (myScriptPanel instanceof Window) {
        myScriptPanel.center();
        myScriptPanel.show();
    } else if (myScriptPanel instanceof Panel) {
        myScriptPanel.layout.layout(true);
    }
})(this);


// Copyright (c) 2025 Howie Chin
// All rights reserved.

// Permission is hereby granted, free of charge, to any person obtaining a copy of this software 
// and associated documentation files (the "Software"), to deal in the Software without restriction, 
// including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
// and/or sell copies of the Software, subject to the following conditions:
//
// The above copyright notice, this permission notice, and the following disclaimer shall be included 
// in all copies or substantial portions of the Software.

// Disclaimer:
// This script is provided "as is" without any warranties or guarantees of any kind, express or implied, 
// including but not limited to the warranties of merchantability, fitness for a particular purpose, 
// and noninfringement. Use it at your own risk. The author is not responsible for any damage or loss 
// resulting from the use of this script.

// Attribution:
// If you modify or redistribute this script, please provide clear credit to the original author, 
// Howie Chin, and link back to the original GitHub repository: https://github.com/howiechin. 
// I would also appreciate being informed of any modifications to the script.


